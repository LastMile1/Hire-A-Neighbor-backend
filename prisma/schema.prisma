// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  encrypted_password String?
  first_name        String?
  last_name         String?
  full_name         String?
  avatar_url        String?
  phone             String?
  role              String    @default("user") // 'admin' | 'user'
  status            String    @default("active") // 'active' | 'inactive' | 'banned'
  email_verified    Boolean   @default(false)
  phone_verified    Boolean   @default(false)
  last_sign_in_at   DateTime?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Auth related fields
  confirmation_token      String?
  confirmation_sent_at    DateTime?
  confirmed_at           DateTime?
  reset_password_token   String?
  reset_password_sent_at DateTime?
  remember_created_at    DateTime?

  // Relations
  addresses Address[]
  sessions  Session[]

  @@map("users")
}

model Session {
  id           String   @id @default(uuid())
  user_id      String
  expires_at   DateTime
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("sessions")
}

model Address {
  id              String    @id @default(uuid())
  type            String    // 'home' | 'work' | 'billing' | 'shipping'
  address_line1   String
  address_line2   String?
  city            String
  state           String
  postal_code     String
  country         String
  is_default      Boolean   @default(false)
  latitude        Float?
  longitude       Float?
  mapbox_id       String?
  place_formatted String?
  full_address    String?
  match_code      Json?
  is_verified     Boolean   @default(false)
  user_id         String
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([is_default])
  @@map("addresses")
}
