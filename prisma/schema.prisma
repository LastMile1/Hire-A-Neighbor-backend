// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// User and Authentication Models
//

model User {
  id                  String        @id @default(uuid())
  email               String        @unique
  encrypted_password  String?
  first_name          String?
  last_name           String?
  full_name           String?
  avatar_url          String?
  phone               String?
  role                String        @default("user") // 'admin' | 'user'
  status              String        @default("active") // 'active' | 'inactive' | 'banned'
  email_verified      Boolean       @default(false)
  phone_verified      Boolean       @default(false)
  last_sign_in_at     DateTime?
  created_at          DateTime      @default(now())
  updated_at          DateTime      @updatedAt

  // Auth related fields
  confirmation_token      String?
  confirmation_sent_at    DateTime?
  confirmed_at           DateTime?
  reset_password_token   String?
  reset_password_sent_at DateTime?
  remember_created_at    DateTime?

  // Relations
  addresses    Address[]
  sessions     Session[]
  teamRoles    TeamRole[]
  projectRoles ProjectRole[]
  notifications notifications[]
  userRoles    UserRole[]

  @@map("users")
}

model Session {
  id         String   @id @default(uuid())
  user_id    String
  expires_at DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("sessions")
}

model Address {
  id              String    @id @default(uuid())
  
  // Entity type and user association
  type            String    @db.VarChar(50)  // EntityType enum: 'USER', 'BUSINESS', 'EVENT'
  user_id         String
  user            User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  // Basic address fields
  address_line1   String    @db.VarChar(100)
  address_line2   String?   @db.VarChar(100)
  unit_number     String?   @db.VarChar(20)
  city            String    @db.VarChar(100)
  state           String    @db.VarChar(50)  // State/Province/Region
  postal_code     String    @db.VarChar(20)
  country         String    @default("US") @db.VarChar(2)  // ISO 3166-1 alpha-2
  country_code    String?   @db.VarChar(3)   // ISO 3166-1 alpha-3
  
  // Address metadata
  label           String?   @db.VarChar(50)  // User-defined label
  is_default      Boolean   @default(false)
  is_verified     Boolean   @default(false)
  is_active       Boolean   @default(true)
  
  // Geocoding information
  latitude        Float?
  longitude       Float?
  timezone        String?   @db.VarChar(50)
  
  // External service data
  mapbox_id       String?   @db.VarChar(100) // External service reference
  place_formatted String?   @db.VarChar(255) // Formatted address from geocoding service
  full_address    String?   @db.VarChar(255) // Concatenated address string
  match_code      Json?     // Address verification results
  metadata        Json?     // Additional flexible storage
  
  // Timestamps
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  // Indexes for common queries
  @@index([type, user_id])
  @@index([is_default, is_active])
  
  // Ensure only one default address per entity type per user
  @@unique([type, user_id, is_default], name: "unique_default_address_per_type_per_user")
  
  @@map("addresses")
}

//
// RBAC Models
//

model Role {
  id              String           @id @default(uuid())
  name            String           @unique
  description     String?
  isSystem        Boolean          @default(false)
  parentRoleId    String?
  priority        Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  parentRole      Role?           @relation("RoleHierarchy", fields: [parentRoleId], references: [id])
  childRoles      Role[]          @relation("RoleHierarchy")
  rolePermissions RolePermission[]
  roleConditions  RoleCondition[]
  userRoles       UserRole[]
  teamRoles       TeamRole[]
  projectRoles    ProjectRole[]
}

model Permission {
  id              String           @id @default(uuid())
  resource        String
  action          String
  attributes      String[]
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]

  @@unique([resource, action])
}

model RolePermission {
  id            String               @id @default(uuid())
  roleId        String
  permissionId  String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  role          Role                @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission    Permission          @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  conditions    PermissionCondition[]
}

model PermissionCondition {
  id               String         @id @default(uuid())
  rolePermissionId String
  type            String         // 'time-window' | 'scope-match' | 'team-membership' | 'project-membership' | 'content-state'
  condition       Json
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  rolePermission  RolePermission @relation(fields: [rolePermissionId], references: [id], onDelete: Cascade)
}

model RoleCondition {
  id          String    @id @default(uuid())
  roleId      String
  type        String    // 'time-window' | 'scope-match' | 'team-membership' | 'project-membership' | 'content-state'
  condition   Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  role        Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model UserRole {
  id        String    @id @default(uuid())
  userId    String
  roleId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  role      Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model Team {
  id          String     @id @default(uuid())
  name        String
  description String?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  teamRoles   TeamRole[]
}

model TeamRole {
  id          String    @id @default(uuid())
  userId      String    // Added field
  teamId      String
  roleId      String
  conditions  Json?     // Team-specific conditions
  metadata    Json?     // Additional metadata
  isActive    Boolean   @default(true)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  // Relations
  team        Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  role        Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade) // Added relation

  @@unique([userId, teamId, roleId]) // Updated Unique Constraint
  @@index([userId])
  @@index([teamId])
  @@index([roleId])
  @@map("team_roles")
}

model Project {
  id           String        @id @default(uuid())
  name         String
  description  String?
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  projectRoles ProjectRole[]
}

model ProjectRole {
  id          String    @id @default(uuid())
  userId      String    // Added field
  projectId   String
  roleId      String
  conditions  Json?     // Project-specific conditions
  metadata    Json?     // Additional metadata
  isActive    Boolean   @default(true)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  // Relations
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role        Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade) // Added relation

  @@unique([userId, projectId, roleId]) // Updated Unique Constraint
  @@index([userId])
  @@index([projectId])
  @@index([roleId])
  @@map("project_roles")
}

model notifications {
  id          String    @id @default(uuid())
  userId      String
  type        String    // 'info', 'success', 'warning', 'error'
  title       String
  message     String
  read        Boolean   @default(false)
  readAt      DateTime?
  metadata    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([read])
  @@map("notifications")
}

model Scope {
  id          String    @id @default(uuid())
  name        String    @unique
  type        String    // 'team', 'project', 'organization', 'custom'
  description String?
  metadata    Json?
  parentId    String?
  parent      Scope?    @relation("ScopeHierarchy", fields: [parentId], references: [id])
  children    Scope[]   @relation("ScopeHierarchy")
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  @@map("scopes")
}